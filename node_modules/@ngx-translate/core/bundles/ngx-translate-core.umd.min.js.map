{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-translate/core/lib/translate.loader.ts","ng://@ngx-translate/core/lib/missing-translation-handler.ts","ng://@ngx-translate/core/lib/translate.compiler.ts","ng://@ngx-translate/core/lib/util.ts","ng://@ngx-translate/core/lib/translate.parser.ts","ng://@ngx-translate/core/lib/translate.store.ts","ng://@ngx-translate/core/lib/translate.service.ts","ng://@ngx-translate/core/lib/translate.directive.ts","ng://@ngx-translate/core/lib/translate.pipe.ts","ng://@ngx-translate/core/public_api.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","TranslateLoader","TranslateFakeLoader","_super","tslib_1.__extends","getTranslation","lang","of","Injectable","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","equals","o1","o2","keySet","t1","isArray","isDefined","isObject","item","TranslateParser","TranslateDefaultParser","_this","apply","arguments","templateMatcher","interpolate","expr","interpolateString","interpolateFunction","getValue","target","keys","split","shift","undefined","fn","replace","substring","r","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","EventEmitter","onLangChange","onDefaultLangChange","USE_STORE","InjectionToken","USE_DEFAULT_LANG","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","defineProperty","_defaultLang","_currentLang","setDefaultLang","retrieveTranslations","pipe","take","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","share","map","updateLangs","err","setTranslation","shouldMerge","mergeDeep","source","output","assign","forEach","_a","_b","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","result","observables","key_1","tslib_1.__values","key_1_1","k","mergedObs","key_2","key_2_1","obs","merge","toArray","arr","obj","index","translateService","get","Error","Observable","observer","onComplete","complete","onError","error","stream","concat","switchMap","event","instant","obj_1","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","Inject","args","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","node","nodeType","lastKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","Directive","selector","ElementRef","ChangeDetectorRef","Input","TranslatePipe","translate","transform","query","_i","validArgs","JSON","parse","e","SyntaxError","_dispose","Pipe","name","pure","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from \"@angular/core\";\nimport {Observable, of} from \"rxjs\";\n\nexport abstract class TranslateLoader {\n  abstract getTranslation(lang: string): Observable<any>;\n}\n\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\n@Injectable()\nexport class TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang: string): Observable<any> {\n    return of({});\n  }\n}\n","import {Injectable} from \"@angular/core\";\nimport {TranslateService} from \"./translate.service\";\n\nexport interface MissingTranslationHandlerParams {\n  /**\n   * the key that's missing in translation files\n   */\n  key: string;\n\n  /**\n   * an instance of the service that was unable to translate the key.\n   */\n  translateService: TranslateService;\n\n  /**\n   * interpolation params that were passed along for translating the given key.\n   */\n  interpolateParams?: Object;\n}\n\nexport abstract class MissingTranslationHandler {\n  /**\n   * A function that handles missing translations.\n   *\n   * @param params context for resolving a missing translation\n   * @returns a value or an observable\n   * If it returns a value, then this value is used.\n   * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n   * If it doesn't return then the key will be used as a value\n   */\n  abstract handle(params: MissingTranslationHandlerParams): any;\n}\n\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\n@Injectable()\nexport class FakeMissingTranslationHandler implements MissingTranslationHandler {\n  handle(params: MissingTranslationHandlerParams): string {\n    return params.key;\n  }\n}\n","import {Injectable} from \"@angular/core\";\n\nexport abstract class TranslateCompiler {\n  abstract compile(value: string, lang: string): string | Function;\n\n  abstract compileTranslations(translations: any, lang: string): any;\n}\n\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\n@Injectable()\nexport class TranslateFakeCompiler extends TranslateCompiler {\n  compile(value: string, lang: string): string | Function {\n    return value;\n  }\n\n  compileTranslations(translations: any, lang: string): any {\n    return translations;\n  }\n}\n","/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nexport function equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2, length: number, key: any, keySet: any;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\n\nexport function isDefined(value: any): boolean {\n  return typeof value !== 'undefined' && value !== null;\n}\n\nexport function isObject(item: any): boolean {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nexport function mergeDeep(target: any, source: any): any {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key: any) => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {[key]: source[key]});\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {[key]: source[key]});\n      }\n    });\n  }\n  return output;\n}\n","import {Injectable} from \"@angular/core\";\nimport {isDefined} from \"./util\";\n\nexport abstract class TranslateParser {\n  /**\n   * Interpolates a string to replace parameters\n   * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n   * @param expr\n   * @param params\n   */\n  abstract interpolate(expr: string | Function, params?: any): string;\n\n  /**\n   * Gets a value from an object by composed key\n   * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n   * @param target\n   * @param key\n   */\n  abstract getValue(target: any, key: string): any\n}\n\n@Injectable()\nexport class TranslateDefaultParser extends TranslateParser {\n  templateMatcher: RegExp = /{{\\s?([^{}\\s]*)\\s?}}/g;\n\n  public interpolate(expr: string | Function, params?: any): string {\n    let result: string;\n\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr as string;\n    }\n\n    return result;\n  }\n\n  getValue(target: any, key: string): any {\n    let keys = key.split('.');\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n\n    return target;\n  }\n\n  private interpolateFunction(fn: Function, params?: any) {\n    return fn(params);\n  }\n\n  private interpolateString(expr: string, params?: any) {\n    if (!params) {\n      return expr;\n    }\n\n    return expr.replace(this.templateMatcher, (substring: string, b: string) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n","import {EventEmitter} from \"@angular/core\";\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslationChangeEvent} from \"./translate.service\";\n\nexport class TranslateStore {\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  public defaultLang: string;\n\n  /**\n   * The lang currently used\n   */\n  public currentLang: string = this.defaultLang;\n\n  /**\n   * a list of translations per lang\n   */\n  public translations: any = {};\n\n  /**\n   * an array of langs\n   */\n  public langs: Array<string> = [];\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  public onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n}\n","import {EventEmitter, Inject, Injectable, InjectionToken} from \"@angular/core\";\nimport {concat, merge, Observable, Observer, of} from \"rxjs\";\nimport {map, share, switchMap, take, toArray} from \"rxjs/operators\";\nimport {MissingTranslationHandler, MissingTranslationHandlerParams} from \"./missing-translation-handler\";\nimport {TranslateCompiler} from \"./translate.compiler\";\nimport {TranslateLoader} from \"./translate.loader\";\nimport {TranslateParser} from \"./translate.parser\";\n\nimport {TranslateStore} from \"./translate.store\";\nimport {isDefined, mergeDeep} from \"./util\";\n\nexport const USE_STORE = new InjectionToken<string>('USE_STORE');\nexport const USE_DEFAULT_LANG = new InjectionToken<string>('USE_DEFAULT_LANG');\n\nexport interface TranslationChangeEvent {\n  translations: any;\n  lang: string;\n}\n\nexport interface LangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\nexport interface DefaultLangChangeEvent {\n  lang: string;\n  translations: any;\n}\n\ndeclare interface Window {\n  navigator: any;\n}\n\ndeclare const window: Window;\n\n@Injectable()\nexport class TranslateService {\n  private loadingTranslations: Observable<any>;\n  private pending: boolean = false;\n  private _onTranslationChange: EventEmitter<TranslationChangeEvent> = new EventEmitter<TranslationChangeEvent>();\n  private _onLangChange: EventEmitter<LangChangeEvent> = new EventEmitter<LangChangeEvent>();\n  private _onDefaultLangChange: EventEmitter<DefaultLangChangeEvent> = new EventEmitter<DefaultLangChangeEvent>();\n  private _defaultLang: string;\n  private _currentLang: string;\n  private _langs: Array<string> = [];\n  private _translations: any = {};\n  private _translationRequests: any = {};\n\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange(): EventEmitter<TranslationChangeEvent> {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange(): EventEmitter<LangChangeEvent> {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang(): string {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n\n  set defaultLang(defaultLang: string) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n\n  /**\n   * The lang currently used\n   */\n  get currentLang(): string {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n\n  set currentLang(currentLang: string) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n\n  /**\n   * an array of langs\n   */\n  get langs(): string[] {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n\n  set langs(langs: string[]) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n\n  /**\n   * a list of translations per lang\n   */\n  get translations(): any {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n\n  set translations(translations: any) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param isolate whether this service should use the store or not\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   */\n  constructor(public store: TranslateStore,\n              public currentLoader: TranslateLoader,\n              public compiler: TranslateCompiler,\n              public parser: TranslateParser,\n              public missingTranslationHandler: MissingTranslationHandler,\n              @Inject(USE_DEFAULT_LANG) private useDefaultLang: boolean = true,\n              @Inject(USE_STORE) private isolate: boolean = false) {\n  }\n\n  /**\n   * Sets the default language to use as a fallback\n   */\n  public setDefaultLang(lang: string): void {\n    if (lang === this.defaultLang) {\n      return;\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (!this.defaultLang) {\n        this.defaultLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeDefaultLang(lang);\n        });\n    } else { // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Gets the default language used\n   */\n  public getDefaultLang(): string {\n    return this.defaultLang;\n  }\n\n  /**\n   * Changes the lang currently used\n   */\n  public use(lang: string): Observable<any> {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n\n    let pending: Observable<any> = this.retrieveTranslations(lang);\n\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n\n      pending.pipe(take(1))\n        .subscribe((res: any) => {\n          this.changeLang(lang);\n        });\n\n      return pending;\n    } else { // we have this language, return an Observable\n      this.changeLang(lang);\n\n      return of(this.translations[lang]);\n    }\n  }\n\n  /**\n   * Retrieves the given translations\n   */\n  private retrieveTranslations(lang: string): Observable<any> {\n    let pending: Observable<any>;\n\n    // if this language is unavailable, ask for it\n    if (typeof this.translations[lang] === \"undefined\") {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n\n    return pending;\n  }\n\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  public getTranslation(lang: string): Observable<any> {\n    this.pending = true;\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(share());\n    this.loadingTranslations = loadingTranslations.pipe(\n      take(1),\n      map((res: Object) => this.compiler.compileTranslations(res, lang)),\n      share()\n    );\n\n    this.loadingTranslations\n      .subscribe((res: Object) => {\n        this.translations[lang] = res;\n        this.updateLangs();\n        this.pending = false;\n      }, (err: any) => {\n        this.pending = false;\n      });\n\n    return loadingTranslations;\n  }\n\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  public setTranslation(lang: string, translations: Object, shouldMerge: boolean = false): void {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if (shouldMerge && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Returns an array of currently available langs\n   */\n  public getLangs(): Array<string> {\n    return this.langs;\n  }\n\n  /**\n   * Add available langs\n   */\n  public addLangs(langs: Array<string>): void {\n    langs.forEach((lang: string) => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n\n  /**\n   * Update the list of available langs\n   */\n  private updateLangs(): void {\n    this.addLangs(Object.keys(this.translations));\n  }\n\n  /**\n   * Returns the parsed result of the translations\n   */\n  public getParsedResult(translations: any, key: any, interpolateParams?: Object): any {\n    let res: string | Observable<string>;\n\n    if (key instanceof Array) {\n      let result: any = {},\n        observables: boolean = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (typeof result[k].subscribe === \"function\") {\n          observables = true;\n        }\n      }\n      if (observables) {\n        let mergedObs: Observable<string>;\n        for (let k of key) {\n          let obs = typeof result[k].subscribe === \"function\" ? result[k] : of(result[k] as string);\n          if (typeof mergedObs === \"undefined\") {\n            mergedObs = obs;\n          } else {\n            mergedObs = merge(mergedObs, obs);\n          }\n        }\n        return mergedObs.pipe(\n          toArray(),\n          map((arr: Array<string>) => {\n            let obj: any = {};\n            arr.forEach((value: string, index: number) => {\n              obj[key[index]] = value;\n            });\n            return obj;\n          })\n        );\n      }\n      return result;\n    }\n\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\" && this.defaultLang && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n\n    if (typeof res === \"undefined\") {\n      let params: MissingTranslationHandlerParams = {key, translateService: this};\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n\n    return typeof res !== \"undefined\" ? res : key;\n  }\n\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  public get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return Observable.create((observer: Observer<string>) => {\n        let onComplete = (res: string) => {\n          observer.next(res);\n          observer.complete();\n        };\n        let onError = (err: any) => {\n          observer.error(err);\n        };\n        this.loadingTranslations.subscribe((res: any) => {\n          res = this.getParsedResult(res, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            res.subscribe(onComplete, onError);\n          } else {\n            onComplete(res);\n          }\n        }, onError);\n      });\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      if (typeof res.subscribe === \"function\") {\n        return res;\n      } else {\n        return of(res);\n      }\n    }\n  }\n\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  public stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any> {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    return concat(\n      this.get(key, interpolateParams),\n      this.onLangChange.pipe(\n        switchMap((event: LangChangeEvent) => {\n          const res = this.getParsedResult(event.translations, key, interpolateParams);\n          if (typeof res.subscribe === \"function\") {\n            return res;\n          } else {\n            return of(res);\n          }\n        })\n      ));\n  }\n\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  public instant(key: string | Array<string>, interpolateParams?: Object): string | any {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (typeof res.subscribe !== \"undefined\") {\n      if (key instanceof Array) {\n        let obj: any = {};\n        key.forEach((value: string, index: number) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  public set(key: string, value: string, lang: string = this.currentLang): void {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Changes the current lang\n   */\n  private changeLang(lang: string): void {\n    this.currentLang = lang;\n    this.onLangChange.emit({lang: lang, translations: this.translations[lang]});\n\n    // if there is no default lang, use the one that we just set\n    if (!this.defaultLang) {\n      this.changeDefaultLang(lang);\n    }\n  }\n\n  /**\n   * Changes the default lang\n   */\n  private changeDefaultLang(lang: string): void {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({lang: lang, translations: this.translations[lang]});\n  }\n\n  /**\n   * Allows to reload the lang file from the file\n   */\n  public reloadLang(lang: string): Observable<any> {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n\n  /**\n   * Deletes inner translation\n   */\n  public resetLang(lang: string): void {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  public getBrowserLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n\n    return browserLang;\n  }\n\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  public getBrowserCultureLang(): string {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n\n    let browserCultureLang: any = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n\n    return browserCultureLang;\n  }\n}\n","import {AfterViewChecked, ChangeDetectorRef, Directive, ElementRef, Input, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Directive({\n  selector: '[translate],[ngx-translate]'\n})\nexport class TranslateDirective implements AfterViewChecked, OnDestroy {\n  key: string;\n  lastParams: any;\n  currentParams: any;\n  onLangChangeSub: Subscription;\n  onDefaultLangChangeSub: Subscription;\n  onTranslationChangeSub: Subscription;\n\n  @Input() set translate(key: string) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n\n  @Input() set translateParams(params: any) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n\n  constructor(private translateService: TranslateService, private element: ElementRef, private _ref: ChangeDetectorRef) {\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event: DefaultLangChangeEvent) => {\n        this.checkNodes(true);\n      });\n    }\n  }\n\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n\n  checkNodes(forceUpdate = false, translations?: any) {\n    let nodes: NodeList = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node: any = nodes[i];\n      if (node.nodeType === 3) { // node type 3 is a text node\n        let key: string;\n        if (this.key) {\n          key = this.key;\n          if (forceUpdate) {\n            node.lastKey = null;\n          }\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = this.getContent(node);\n            } else if (node.originalContent && forceUpdate) { // the content seems ok, but the lang has changed\n              node.lastKey = null;\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n\n  updateValue(key: string, node: any, translations: any) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n\n      this.lastParams = this.currentParams;\n\n      let onTranslation = (res: string) => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (typeof res.subscribe === \"function\") {\n          res.subscribe(onTranslation);\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n\n  getContent(node: any): string {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n\n  setContent(node: any, content: string): void {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n","import {ChangeDetectorRef, EventEmitter, Injectable, OnDestroy, Pipe, PipeTransform} from '@angular/core';\nimport {DefaultLangChangeEvent, LangChangeEvent, TranslateService, TranslationChangeEvent} from './translate.service';\nimport {equals, isDefined} from './util';\n\n@Injectable()\n@Pipe({\n  name: 'translate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class TranslatePipe implements PipeTransform, OnDestroy {\n  value: string = '';\n  lastKey: string;\n  lastParams: any[];\n  onTranslationChange: EventEmitter<TranslationChangeEvent>;\n  onLangChange: EventEmitter<LangChangeEvent>;\n  onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\n\n  constructor(private translate: TranslateService, private _ref: ChangeDetectorRef) {\n  }\n\n  updateValue(key: string, interpolateParams?: Object, translations?: any): void {\n    let onTranslation = (res: string) => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n\n  transform(query: string, ...args: any[]): any {\n    if (!query || query.length === 0) {\n      return query;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    let interpolateParams: Object;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs: string = args[0]\n          .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n          .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n\n    // store the query, in case it changes\n    this.lastKey = query;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(query, interpolateParams);\n\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe((event: TranslationChangeEvent) => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n\n    return this.value;\n  }\n\n  /**\n   * Clean any existing subscription to change events\n   */\n  private _dispose(): void {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._dispose();\n  }\n}\n","import {NgModule, ModuleWithProviders, Provider} from \"@angular/core\";\nimport {TranslateLoader, TranslateFakeLoader} from \"./lib/translate.loader\";\nimport {TranslateService} from \"./lib/translate.service\";\nimport {MissingTranslationHandler, FakeMissingTranslationHandler} from \"./lib/missing-translation-handler\";\nimport {TranslateParser, TranslateDefaultParser} from \"./lib/translate.parser\";\nimport {TranslateCompiler, TranslateFakeCompiler} from \"./lib/translate.compiler\";\nimport {TranslateDirective} from \"./lib/translate.directive\";\nimport {TranslatePipe} from \"./lib/translate.pipe\";\nimport {TranslateStore} from \"./lib/translate.store\";\nimport {USE_STORE} from \"./lib/translate.service\";\nimport {USE_DEFAULT_LANG} from \"./lib/translate.service\";\n\nexport * from \"./lib/translate.loader\";\nexport * from \"./lib/translate.service\";\nexport * from \"./lib/missing-translation-handler\";\nexport * from \"./lib/translate.parser\";\nexport * from \"./lib/translate.compiler\";\nexport * from \"./lib/translate.directive\";\nexport * from \"./lib/translate.pipe\";\nexport * from \"./lib/translate.store\";\n\nexport interface TranslateModuleConfig {\n  loader?: Provider;\n  compiler?: Provider;\n  parser?: Provider;\n  missingTranslationHandler?: Provider;\n  // isolate the service instance, only works for lazy loaded modules or components with the \"providers\" property\n  isolate?: boolean;\n  useDefaultLang?: boolean;\n}\n\n@NgModule({\n  declarations: [\n    TranslatePipe,\n    TranslateDirective\n  ],\n  exports: [\n    TranslatePipe,\n    TranslateDirective\n  ]\n})\nexport class TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        TranslateStore,\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config: TranslateModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: TranslateModule,\n      providers: [\n        config.loader || {provide: TranslateLoader, useClass: TranslateFakeLoader},\n        config.compiler || {provide: TranslateCompiler, useClass: TranslateFakeCompiler},\n        config.parser || {provide: TranslateParser, useClass: TranslateDefaultParser},\n        config.missingTranslationHandler || {provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler},\n        {provide: USE_STORE, useValue: config.isolate},\n        {provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang},\n        TranslateService\n      ]\n    };\n  }\n}\n"]}