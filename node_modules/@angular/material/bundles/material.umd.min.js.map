{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.4');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {StepState} from '@angular/cdk/stepper';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: HasInitializedCtor & typeof MatPaginatorBase =\n    mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!event.altKey && !event.metaKey && !event.shiftKey && !event.ctrlKey) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["this","_activeLinkChanged","element","_changeDetectorRef","markForCheck","MatTabNav","prototype","ngAfterContentInit","_this","_ngZone","runOutsideAngular","dirChange","_dir","change","observableOf","merge","_viewportRuler","pipe","takeUntil","_onDestroy","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","_elementRef","ngOnDestroy","next","complete","_inkBar","show","alignToElement","nativeElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","_super","call","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","value","updateActiveLink","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","tslib_1.__extends","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","classList","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","CdkColumnDef","MatFooterCell","CdkFooterCell","MatCell","columnDef","add","cssClassFriendlyName","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","Subject","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","remove","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","SORT_ANIMATION_TRANSITION","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","CdkHeaderCell","MatSlider","_max","_percent","_calculatePercentage","_value","_min","_step","_roundToDecimal","toString","split","pop","_thumbLabel","_tickInterval","parseFloat","toFixed","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","MatDrawerContent","_container","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_optionIds","options","option","join","MatSelect","_highlightCorrectOption","empty","_selectionModel","_scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","panel","scrollTop","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","_calculateOverlayPosition","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_appRef","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_isInteractiveList","navList","list","_getListType","_list","hasAttribute","setAttribute","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","_dateAdapter","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","metaKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","todayValue","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":"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"}