{"version":3,"sources":["modules/module-map-ngfactory-loader/module-map-ngfactory-loader.umd.js"],"names":["global","factory","exports","module","require","define","amd","nguniversal","moduleMapNgfactoryLoader","tslib","ng","core","this","tslib_1","MODULE_MAP","InjectionToken","ModuleMapNgFactoryLoader","compiler","moduleMap","prototype","load","loadChildrenString","offlineMode","Compiler","type","Error","loadFactory","loadAndCompile","Promise","resolve","compileModuleAsync","__decorate","Injectable","__param","Inject","__metadata","Object","ModuleMapLoaderModule","ModuleMapLoaderModule_1","withMap","ngModule","providers","provide","useValue","NgModule","NgModuleFactoryLoader","useClass","provideModuleMap","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,SAAUA,QAAQ,kBACxF,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,4CAA6C,UAAW,QAAS,iBAAkBJ,GACtIA,GAASD,EAAOO,YAAcP,EAAOO,gBAAmBP,EAAOO,YAAYC,6BAA+BR,EAAOS,MAAMT,EAAOU,GAAGC,MAHtI,CAIEC,KAAM,SAAWV,EAAQW,EAAQF,GAAQ,aAKvC,IAAIG,EAAa,IAAIH,EAAKI,eAAe,cAIrCC,EAA0C,WAC1C,SAASA,EAAyBC,EAAUC,GACxCN,KAAKK,SAAWA,EAChBL,KAAKM,UAAYA,EAsBrB,OApBAF,EAAyBG,UAAUC,KAAO,SAAUC,GAChD,IAAIC,EAAcV,KAAKK,oBAAoBN,EAAKY,SAC5CC,EAAOZ,KAAKM,UAAUG,GAC1B,IAAKG,EACD,MAAM,IAAIC,MAAMJ,EAAqB,oCAEzC,OAAOC,EACHV,KAAKc,YAAYF,GAAQZ,KAAKe,eAAeH,IAErDR,EAAyBG,UAAUO,YAAc,SAAUzB,GACvD,OAAO,IAAI2B,QAAQ,SAAUC,GAAW,OAAOA,EAAQ5B,MAE3De,EAAyBG,UAAUQ,eAAiB,SAAUH,GAC1D,OAAOZ,KAAKK,SAASa,mBAAmBN,IAEjBX,EAAQkB,YAC/BpB,EAAKqB,aACLnB,EAAQoB,QAAQ,EAAGtB,EAAKuB,OAAOpB,IAC/BD,EAAQsB,WAAW,qBAAsBxB,EAAKY,SAAUa,UACzDpB,GAxBsC,GA0CzCqB,EAAuC,WACvC,SAASA,KAmBT,IAAIC,EAWJ,OA5BAA,EAA0BD,EAM1BA,EAAsBE,QAAU,SAAUrB,GACtC,OACIsB,SAAUF,EACVG,YAEQC,QAAS5B,EACT6B,SAAUzB,MAMFoB,EAA0BzB,EAAQkB,YACtDpB,EAAKiC,UACDH,YAEQC,QAAS/B,EAAKkC,sBACdC,SAAU9B,OAIvBqB,GA9BmC;;;;;;;;;;;;;;;;;;;;;;AA8D1CnC,EAAQ6C,iBAvER,SAASA,EAAiB7B,GACtB,OACIwB,QAAS5B,EACT6B,SAAUzB,IAqElBhB,EAAQmC,sBAAwBA,EAChCnC,EAAQY,WAAaA,EACrBZ,EAAQc,yBAA2BA,EAEnCoB,OAAOY,eAAe9C,EAAS,cAAgB+C,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core')) :\n    typeof define === 'function' && define.amd ? define('@nguniversal/module-map-ngfactory-loader', ['exports', 'tslib', '@angular/core'], factory) :\n    (factory((global.nguniversal = global.nguniversal || {}, global.nguniversal.moduleMapNgfactoryLoader = {}),global.tslib,global.ng.core));\n}(this, (function (exports,tslib_1,core) { 'use strict';\n\n    /**\n     * Token used by the ModuleMapNgFactoryLoader to load modules\n     */\n    var MODULE_MAP = new core.InjectionToken('MODULE_MAP');\n    /**\n     * NgModuleFactoryLoader which does not lazy load\n     */\n    var ModuleMapNgFactoryLoader = /** @class */ (function () {\n        function ModuleMapNgFactoryLoader(compiler, moduleMap) {\n            this.compiler = compiler;\n            this.moduleMap = moduleMap;\n        }\n        ModuleMapNgFactoryLoader.prototype.load = function (loadChildrenString) {\n            var offlineMode = this.compiler instanceof core.Compiler;\n            var type = this.moduleMap[loadChildrenString];\n            if (!type) {\n                throw new Error(loadChildrenString + \" did not exist in the MODULE_MAP\");\n            }\n            return offlineMode ?\n                this.loadFactory(type) : this.loadAndCompile(type);\n        };\n        ModuleMapNgFactoryLoader.prototype.loadFactory = function (factory) {\n            return new Promise(function (resolve) { return resolve(factory); });\n        };\n        ModuleMapNgFactoryLoader.prototype.loadAndCompile = function (type) {\n            return this.compiler.compileModuleAsync(type);\n        };\n        ModuleMapNgFactoryLoader = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__param(1, core.Inject(MODULE_MAP)),\n            tslib_1.__metadata(\"design:paramtypes\", [core.Compiler, Object])\n        ], ModuleMapNgFactoryLoader);\n        return ModuleMapNgFactoryLoader;\n    }());\n\n    /**\n     * Helper function for getting the providers object for the MODULE_MAP\n     *\n     * @param moduleMap Map to use as a value for MODULE_MAP\n     */\n    function provideModuleMap(moduleMap) {\n        return {\n            provide: MODULE_MAP,\n            useValue: moduleMap\n        };\n    }\n    /**\n     * Module for using a NgModuleFactoryLoader which does not lazy load\n     */\n    var ModuleMapLoaderModule = /** @class */ (function () {\n        function ModuleMapLoaderModule() {\n        }\n        ModuleMapLoaderModule_1 = ModuleMapLoaderModule;\n        /**\n         * Returns a ModuleMapLoaderModule along with a MODULE_MAP\n         *\n         * @param moduleMap Map to use as a value for MODULE_MAP\n         */\n        ModuleMapLoaderModule.withMap = function (moduleMap) {\n            return {\n                ngModule: ModuleMapLoaderModule_1,\n                providers: [\n                    {\n                        provide: MODULE_MAP,\n                        useValue: moduleMap\n                    }\n                ]\n            };\n        };\n        var ModuleMapLoaderModule_1;\n        ModuleMapLoaderModule = ModuleMapLoaderModule_1 = tslib_1.__decorate([\n            core.NgModule({\n                providers: [\n                    {\n                        provide: core.NgModuleFactoryLoader,\n                        useClass: ModuleMapNgFactoryLoader\n                    }\n                ]\n            })\n        ], ModuleMapLoaderModule);\n        return ModuleMapLoaderModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.provideModuleMap = provideModuleMap;\n    exports.ModuleMapLoaderModule = ModuleMapLoaderModule;\n    exports.MODULE_MAP = MODULE_MAP;\n    exports.ModuleMapNgFactoryLoader = ModuleMapNgFactoryLoader;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=module-map-ngfactory-loader.umd.js.map\n"]}