{"version":3,"sources":["modules/express-engine/express-engine.umd.js"],"names":["global","factory","exports","module","require","define","amd","nguniversal","expressEngine","fs","ng","core","compiler","platformServer","tokens","this","FileLoader","prototype","get","url","Promise","resolve","reject","readFile","err","buffer","toString","templateCache","factoryCacheMap","Map","ngExpressEngine","setupOptions","compiler$$1","platformDynamicServer","injector","CompilerFactory","createCompiler","providers","provide","ResourceLoader","useClass","deps","filePath","options","callback","moduleOrFactory","bootstrap","Error","req","extraProviders_1","concat","getReqResProviders","res","REQUEST","useValue","push","RESPONSE","INITIAL_CONFIG","document","getDocument","readFileSync","protocol","originalUrl","getFactory","NgModuleFactory","moduleFactory","compileModuleAsync","then","set","renderModuleFactory","extraProviders","html","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACI,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,MAAOA,QAAQ,iBAAkBA,QAAQ,qBAAsBA,QAAQ,4BAA6BA,QAAQ,uCAClL,mBAAXC,QAAyBA,OAAOC,IAAMD,OAAO,+BAAgC,UAAW,KAAM,gBAAiB,oBAAqB,2BAA4B,sCAAuCJ,GAC7MA,GAASD,EAAOO,YAAcP,EAAOO,gBAAmBP,EAAOO,YAAYC,kBAAoBR,EAAOS,GAAGT,EAAOU,GAAGC,KAAKX,EAAOU,GAAGE,SAASZ,EAAOU,GAAGG,eAAeb,EAAOO,YAAYC,cAAcM,QAH1M,CAIEC,KAAM,SAAWb,EAAQO,EAAGE,EAAKC,EAASC,EAAeC,GAAU;;;;;;;OASjE,IAAIE,EAA4B,WAC5B,SAASA,KAYT,OAVAA,EAAWC,UAAUC,IAAM,SAAUC,GACjC,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClCb,EAAGc,SAASJ,EAAK,SAAUK,EAAKC,GAC5B,GAAID,EACA,OAAOF,EAAOE,GAElBH,EAAQI,EAAOC,iBAIpBV,EAboB,GA0B3BW,KAIAC,EAAkB,IAAIC;;;;;;;;;;;;;;;;;;;;;;AAyH1B3B,EAAQ4B,gBArHR,SAASA,EAAgBC,GACrB,IACIC,EADkBnB,EAAeoB,wBAAwBC,SAAShB,IAAIP,EAAKwB,iBAC7CC,iBAE1BC,YACMC,QAAS1B,EAAS2B,eAAgBC,SAAUxB,EAAYyB,aAItE,OAAO,SAAUC,EAAUC,EAASC,GAChCD,EAAQN,UAAYM,EAAQN,cAC5B,IACI,IAAIQ,EAAkBF,EAAQG,WAAaf,EAAae,UACxD,IAAKD,EACD,MAAM,IAAIE,MAAM,qEAEpBhB,EAAaM,UAAYN,EAAaM,cACtC,IAAIW,EAAML,EAAQK,IACdC,EAAmBlB,EAAaM,UAAUa,OAAOP,EAAQN,UAyDzE,SAASc,EAAmBH,EAAKI,GAC7B,IAAIf,IAEIC,QAASxB,EAAOuC,QAChBC,SAAUN,IASlB,OANII,GACAf,EAAUkB,MACNjB,QAASxB,EAAO0C,SAChBF,SAAUF,IAGXf,EAtEyEc,CAAmBR,EAAQK,IAAKL,EAAQS,OAExGd,QAASzB,EAAe4C,eACxBH,UACII,SAAUf,EAAQe,UAuE1C,SAASC,EAAYjB,GACjB,OAAOf,EAAce,GAAYf,EAAce,IAAajC,EAAGmD,aAAalB,GAAUhB,WAxEpCiC,CAAYjB,GAC1CvB,IAAKwB,EAAQxB,KAAO6B,EAAIa,SAAW,OAASb,EAAI9B,IAAI,SAAW,IAAM8B,EAAIc,iBAwBjG,SAASC,EAAWlB,EAAiBb,GACjC,OAAO,IAAIZ,QAAQ,SAAUC,EAASC,GAElC,GAAIuB,aAA2BlC,EAAKqD,gBAChC3C,EAAQwB,OADZ,CAKI,IAAIoB,EAAgBrC,EAAgBV,IAAI2B,GAEpCoB,EACA5C,EAAQ4C,GAIZjC,EAAYkC,mBAAmBrB,GAC1BsB,KAAK,SAAUlE,GAChB2B,EAAgBwC,IAAIvB,EAAiB5C,GACrCoB,EAAQpB,IACT,SAAWuB,GACVF,EAAOE,SAxCXuC,CAAWlB,EAAiBb,GACvBmC,KAAK,SAAUlE,GAChB,OAAOY,EAAewD,oBAAoBpE,GACtCqE,eAAgBrB,MAGnBkB,KAAK,SAAUI,GAChB3B,EAAS,KAAM2B,IAChB,SAAU/C,GACToB,EAASpB,KAGjB,MAAOA,GACHoB,EAASpB,MA+ErBgD,OAAOC,eAAevE,EAAS,cAAgBwE,OAAO","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('fs'), require('@angular/core'), require('@angular/compiler'), require('@angular/platform-server'), require('@nguniversal/express-engine/tokens')) :\n    typeof define === 'function' && define.amd ? define('@nguniversal/express-engine', ['exports', 'fs', '@angular/core', '@angular/compiler', '@angular/platform-server', '@nguniversal/express-engine/tokens'], factory) :\n    (factory((global.nguniversal = global.nguniversal || {}, global.nguniversal.expressEngine = {}),global.fs,global.ng.core,global.ng.compiler,global.ng.platformServer,global.nguniversal.expressEngine.tokens));\n}(this, (function (exports,fs,core,compiler,platformServer,tokens) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var FileLoader = /** @class */ (function () {\n        function FileLoader() {\n        }\n        FileLoader.prototype.get = function (url) {\n            return new Promise(function (resolve, reject) {\n                fs.readFile(url, function (err, buffer) {\n                    if (err) {\n                        return reject(err);\n                    }\n                    resolve(buffer.toString());\n                });\n            });\n        };\n        return FileLoader;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * This holds a cached version of each index used.\n     */\n    var templateCache = {};\n    /**\n     * Map of Module Factories\n     */\n    var factoryCacheMap = new Map();\n    /**\n     * This is an express engine for handling Angular Applications\n     */\n    function ngExpressEngine(setupOptions) {\n        var compilerFactory = platformServer.platformDynamicServer().injector.get(core.CompilerFactory);\n        var compiler$$1 = compilerFactory.createCompiler([\n            {\n                providers: [\n                    { provide: compiler.ResourceLoader, useClass: FileLoader, deps: [] }\n                ]\n            }\n        ]);\n        return function (filePath, options, callback) {\n            options.providers = options.providers || [];\n            try {\n                var moduleOrFactory = options.bootstrap || setupOptions.bootstrap;\n                if (!moduleOrFactory) {\n                    throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');\n                }\n                setupOptions.providers = setupOptions.providers || [];\n                var req = options.req;\n                var extraProviders_1 = setupOptions.providers.concat(options.providers, getReqResProviders(options.req, options.res), [\n                    {\n                        provide: platformServer.INITIAL_CONFIG,\n                        useValue: {\n                            document: options.document || getDocument(filePath),\n                            url: options.url || req.protocol + '://' + (req.get('host') || '') + req.originalUrl\n                        }\n                    }\n                ]);\n                getFactory(moduleOrFactory, compiler$$1)\n                    .then(function (factory) {\n                    return platformServer.renderModuleFactory(factory, {\n                        extraProviders: extraProviders_1\n                    });\n                })\n                    .then(function (html) {\n                    callback(null, html);\n                }, function (err) {\n                    callback(err);\n                });\n            }\n            catch (err) {\n                callback(err);\n            }\n        };\n    }\n    /**\n     * Get a factory from a bootstrapped module/ module factory\n     */\n    function getFactory(moduleOrFactory, compiler$$1) {\n        return new Promise(function (resolve, reject) {\n            // If module has been compiled AoT\n            if (moduleOrFactory instanceof core.NgModuleFactory) {\n                resolve(moduleOrFactory);\n                return;\n            }\n            else {\n                var moduleFactory = factoryCacheMap.get(moduleOrFactory);\n                // If module factory is cached\n                if (moduleFactory) {\n                    resolve(moduleFactory);\n                    return;\n                }\n                // Compile the module and cache it\n                compiler$$1.compileModuleAsync(moduleOrFactory)\n                    .then(function (factory) {\n                    factoryCacheMap.set(moduleOrFactory, factory);\n                    resolve(factory);\n                }, (function (err) {\n                    reject(err);\n                }));\n            }\n        });\n    }\n    /**\n     * Get providers of the request and response\n     */\n    function getReqResProviders(req, res) {\n        var providers = [\n            {\n                provide: tokens.REQUEST,\n                useValue: req\n            }\n        ];\n        if (res) {\n            providers.push({\n                provide: tokens.RESPONSE,\n                useValue: res\n            });\n        }\n        return providers;\n    }\n    /**\n     * Get the document at the file path\n     */\n    function getDocument(filePath) {\n        return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ngExpressEngine = ngExpressEngine;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=express-engine.umd.js.map\n"]}